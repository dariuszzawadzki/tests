import java.util.concurrent.ExecutionException;

import javax.xml.ws.AsyncHandler;
import javax.xml.ws.Response;

import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;
import org.junit.Test;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import pl.orange.gpon.GetInventoryDataCommon;
import pl.orange.gpon.GetInventoryDataRequest;
import pl.orange.gpon.GetInventoryDataResponse;
import pl.orange.gpon.InvokerData;
import pl.orange.gpon.MpChannel;
import rx.Observable;
import rx.Observer;

/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 * by 'atos' at '4/30/16 5:47 PM' with Gradle 2.6
 *
 * @author atos, @date 4/30/16 5:47 PM
 */
public class LibraryTest {

	TestAsyncHandler tah = new TestAsyncHandler();

	@Test
	public void testSomeLibraryMethod() throws InterruptedException {
		Observable<GetInventoryDataResponse> o = this.getInv();
		o.toBlocking().subscribe(new Observer() {

			@Override
			public void onCompleted() {
				System.out.println(Thread.currentThread().getName() + " onCompleted ");

			}

			@Override
			public void onError(Throwable e) {
				System.out.println(Thread.currentThread().getName() + " onError " + e.getMessage());

			}

			@Override
			public void onNext(Object t) {
				System.out.println(Thread.currentThread().getName() + " onNext " + t.getClass().getSimpleName());
				Gson gson = new GsonBuilder().setPrettyPrinting().create();
				System.out.println(Thread.currentThread().getName() + " onNext \n" + gson.toJson(t));
			}
		});

	}

	public Observable<GetInventoryDataResponse> getInv() {
		return Observable.create((Observable.OnSubscribe<GetInventoryDataResponse>) subscriber -> {

			JaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean();

			factory.setServiceClass(MpChannel.class);
			factory.setAddress("http://10.194.16.8:8181/cxf/MpChannel?wsdl");

			MpChannel soap = (MpChannel) factory.create();

			GetInventoryDataRequest testRequest = new GetInventoryDataRequest();
			InvokerData id = new InvokerData();
			id.setInvokerName("PP");
			testRequest.setInvokerData(id);

			GetInventoryDataCommon idc = new GetInventoryDataCommon();
			testRequest.setGetInventoryDataCommon(idc);
			idc.setIdentifier("NEO100000148608");
			idc.setIdentifierType("DESIG_NUM");
			idc.setRelatedServices(false);
			idc.setServicesDetails(true);
			System.out.println(Thread.currentThread().getName() + " Server call ");

			subscriber.onStart();

			try {
				soap.getInventoryDataAsync(testRequest, new AsyncHandler<GetInventoryDataResponse>() {

					@Override
					public void handleResponse(Response<GetInventoryDataResponse> res) {
						try {

							subscriber.onNext(res.get());
							subscriber.onCompleted();
						} catch (InterruptedException | ExecutionException e) {
							subscriber.onError(e);
						}
					}
				});
			} catch (Exception e) {
				subscriber.onError(e);
			}

		});
	}
}
